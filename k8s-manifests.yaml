# k8s-manifests.yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: enrichment
  labels:
    name: enrichment
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: enrichment-api
  namespace: enrichment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enrichment-api
  namespace: enrichment
  labels:
    app: enrichment-api
spec:
  replicas: 3
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: enrichment-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: enrichment-api
      annotations:
        # Prometheus scrape hints (if you add Prometheus later)
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: enrichment-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
        - name: enrichment-api
          image: IMAGE_HERE
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: APP_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['kubectl.kubernetes.io/restartedAt']
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: v1
kind: Service
metadata:
  name: enrichment-api
  namespace: enrichment
  labels:
    app: enrichment-api
spec:
  type: LoadBalancer
  selector:
    app: enrichment-api
  ports:
    - name: http
      port: 80
      targetPort: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: enrichment-api
  namespace: enrichment
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: enrichment-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enrichment-api
  namespace: enrichment
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: enrichment-api
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: enrichment-api-allow-http
  namespace: enrichment
spec:
  podSelector:
    matchLabels:
      app: enrichment-api
  policyTypes: ["Ingress"]
  ingress:
    - ports:
        - protocol: TCP
          port: 8080
